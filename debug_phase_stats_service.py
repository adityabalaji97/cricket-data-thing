from sqlalchemy.sql import text\nfrom fastapi import HTTPException\nfrom typing import List, Optional\nfrom datetime import date\nfrom models import teams_mapping, Match, BattingStats\n\ndef get_team_phase_stats_service_simple(\n    team_name: str,\n    start_date: Optional[date],\n    end_date: Optional[date],\n    db\n) -> dict:\n    \"\"\"\n    Simplified version of team phase stats service for debugging\n    \"\"\"\n    try:\n        from services.teams import get_all_team_name_variations\n        \n        # Get all possible name variations for the team\n        team_variations = get_all_team_name_variations(team_name)\n        \n        # Simple query to get team's phase stats only (no benchmarking for now)\n        team_phase_stats_query = text(\"\"\"\n            WITH team_phase_aggregates AS (\n                SELECT \n                    -- Powerplay aggregates\n                    COALESCE(SUM(bs.pp_runs), 0) as total_pp_runs,\n                    COALESCE(SUM(bs.pp_balls), 0) as total_pp_balls,\n                    COALESCE(SUM(bs.pp_wickets), 0) as total_pp_wickets,\n                    \n                    -- Middle overs aggregates\n                    COALESCE(SUM(bs.middle_runs), 0) as total_middle_runs,\n                    COALESCE(SUM(bs.middle_balls), 0) as total_middle_balls,\n                    COALESCE(SUM(bs.middle_wickets), 0) as total_middle_wickets,\n                    \n                    -- Death overs aggregates\n                    COALESCE(SUM(bs.death_runs), 0) as total_death_runs,\n                    COALESCE(SUM(bs.death_balls), 0) as total_death_balls,\n                    COALESCE(SUM(bs.death_wickets), 0) as total_death_wickets,\n                    \n                    -- Count of matches\n                    COUNT(DISTINCT bs.match_id) as total_matches\n                FROM batting_stats bs\n                INNER JOIN matches m ON bs.match_id = m.id\n                WHERE bs.batting_team = ANY(:team_variations)\n                AND (:start_date IS NULL OR m.date >= :start_date)\n                AND (:end_date IS NULL OR m.date <= :end_date)\n            )\n            SELECT \n                total_pp_runs,\n                total_pp_balls,\n                total_pp_wickets,\n                total_middle_runs,\n                total_middle_balls,\n                total_middle_wickets,\n                total_death_runs,\n                total_death_balls,\n                total_death_wickets,\n                total_matches,\n                \n                -- Calculated metrics with safe division\n                CASE \n                    WHEN total_pp_wickets > 0 THEN ROUND(total_pp_runs::numeric / total_pp_wickets, 2)\n                    ELSE 0\n                END as pp_average,\n                \n                CASE \n                    WHEN total_pp_balls > 0 THEN ROUND(total_pp_runs::numeric * 100 / total_pp_balls, 2)\n                    ELSE 0\n                END as pp_strike_rate,\n                \n                CASE \n                    WHEN total_middle_wickets > 0 THEN ROUND(total_middle_runs::numeric / total_middle_wickets, 2)\n                    ELSE 0\n                END as middle_average,\n                \n                CASE \n                    WHEN total_middle_balls > 0 THEN ROUND(total_middle_runs::numeric * 100 / total_middle_balls, 2)\n                    ELSE 0\n                END as middle_strike_rate,\n                \n                CASE \n                    WHEN total_death_wickets > 0 THEN ROUND(total_death_runs::numeric / total_death_wickets, 2)\n                    ELSE 0\n                END as death_average,\n                \n                CASE \n                    WHEN total_death_balls > 0 THEN ROUND(total_death_runs::numeric * 100 / total_death_balls, 2)\n                    ELSE 0\n                END as death_strike_rate\n                \n            FROM team_phase_aggregates\n        \"\"\")\n        \n        team_result = db.execute(team_phase_stats_query, {\n            \"team_variations\": team_variations,\n            \"start_date\": start_date,\n            \"end_date\": end_date\n        }).fetchone()\n        \n        if not team_result:\n            # Return default structure if no team data found\n            return {\n                \"powerplay\": {\n                    \"runs\": 0, \"balls\": 0, \"wickets\": 0, \"average\": 0, \"strike_rate\": 0,\n                    \"normalized_average\": 50, \"normalized_strike_rate\": 50\n                },\n                \"middle_overs\": {\n                    \"runs\": 0, \"balls\": 0, \"wickets\": 0, \"average\": 0, \"strike_rate\": 0,\n                    \"normalized_average\": 50, \"normalized_strike_rate\": 50\n                },\n                \"death_overs\": {\n                    \"runs\": 0, \"balls\": 0, \"wickets\": 0, \"average\": 0, \"strike_rate\": 0,\n                    \"normalized_average\": 50, \"normalized_strike_rate\": 50\n                },\n                \"total_matches\": 0,\n                \"context\": \"No data\",\n                \"benchmark_teams\": 0\n            }\n        \n        # For now, use simple normalization (we'll add benchmarking back once this works)\n        # Temporary normalization based on typical cricket values\n        def simple_normalize_avg(avg):\n            # Typical T20 averages: 15-50, with 30 being good\n            if avg <= 15: return 25\n            elif avg <= 30: return 25 + (avg - 15) * 25 / 15  # 25-50\n            elif avg <= 45: return 50 + (avg - 30) * 25 / 15  # 50-75\n            else: return 75 + min(25, (avg - 45) * 25 / 15)   # 75-100\n            \n        def simple_normalize_sr(sr):\n            # Typical T20 strike rates: 100-180, with 130 being good\n            if sr <= 100: return 25\n            elif sr <= 130: return 25 + (sr - 100) * 25 / 30  # 25-50\n            elif sr <= 160: return 50 + (sr - 130) * 25 / 30  # 50-75\n            else: return 75 + min(25, (sr - 160) * 25 / 30)   # 75-100\n        \n        # Extract and convert team stats\n        team_pp_avg = float(team_result.pp_average) if team_result.pp_average else 0\n        team_pp_sr = float(team_result.pp_strike_rate) if team_result.pp_strike_rate else 0\n        team_middle_avg = float(team_result.middle_average) if team_result.middle_average else 0\n        team_middle_sr = float(team_result.middle_strike_rate) if team_result.middle_strike_rate else 0\n        team_death_avg = float(team_result.death_average) if team_result.death_average else 0\n        team_death_sr = float(team_result.death_strike_rate) if team_result.death_strike_rate else 0\n        \n        # Format the response with simplified normalization\n        phase_stats = {\n            \"powerplay\": {\n                \"runs\": team_result.total_pp_runs or 0,\n                \"balls\": team_result.total_pp_balls or 0,\n                \"wickets\": team_result.total_pp_wickets or 0,\n                \"average\": team_pp_avg,\n                \"strike_rate\": team_pp_sr,\n                \"normalized_average\": round(simple_normalize_avg(team_pp_avg), 1),\n                \"normalized_strike_rate\": round(simple_normalize_sr(team_pp_sr), 1)\n            },\n            \"middle_overs\": {\n                \"runs\": team_result.total_middle_runs or 0,\n                \"balls\": team_result.total_middle_balls or 0,\n                \"wickets\": team_result.total_middle_wickets or 0,\n                \"average\": team_middle_avg,\n                \"strike_rate\": team_middle_sr,\n                \"normalized_average\": round(simple_normalize_avg(team_middle_avg), 1),\n                \"normalized_strike_rate\": round(simple_normalize_sr(team_middle_sr), 1)\n            },\n            \"death_overs\": {\n                \"runs\": team_result.total_death_runs or 0,\n                \"balls\": team_result.total_death_balls or 0,\n                \"wickets\": team_result.total_death_wickets or 0,\n                \"average\": team_death_avg,\n                \"strike_rate\": team_death_sr,\n                \"normalized_average\": round(simple_normalize_avg(team_death_avg), 1),\n                \"normalized_strike_rate\": round(simple_normalize_sr(team_death_sr), 1)\n            },\n            \"total_matches\": team_result.total_matches or 0,\n            \"context\": \"Simplified (no benchmarking yet)\",\n            \"benchmark_teams\": 0\n        }\n        \n        return phase_stats\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error fetching team phase stats (simplified): {str(e)}\")