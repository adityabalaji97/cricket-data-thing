import React from 'react';
import axios from 'axios';
import { 
    Box, 
    Card, 
    CircularProgress,
    Alert,
    Typography, 
    Table, 
    TableBody, 
    TableCell, 
    TableContainer, 
    TableHead, 
    TableRow,
    Paper,
    Tooltip,
    Grid,
    Tabs,
    Tab
} from '@mui/material';

import FantasyPointsTable from './FantasyPointsTable';
import FantasyPointsBarChart from './FantasyPointsBarChart';
import { Info as InfoIcon } from 'lucide-react';

const MetricCell = ({ data }) => {
    if (!data) return <TableCell align="center">-</TableCell>;

    const getColor = (sr, balls) => {
        if (balls < 6) return 'text.secondary';
        if (sr >= 150) return 'success.main';
        if (sr <= 100) return 'error.main';
        return 'warning.main';
    };

    const displayValue = `${data.runs}-${data.wickets} (${data.balls}) @ ${data.strike_rate.toFixed(1)}`;

    return (
        <TableCell 
            align="center" 
            sx={{ 
                color: getColor(data.strike_rate, data.balls),
                fontSize: '0.875rem',
                padding: '8px'
            }}
        >
            <Tooltip
                title={
                    <Box>
                        <Typography variant="body2">
                            Average: {data.average ? data.average.toFixed(1) : '-'}
                            <br />
                            Boundary %: {data.boundary_percentage.toFixed(1)}%
                            <br />
                            Dot %: {data.dot_percentage.toFixed(1)}%
                        </Typography>
                    </Box>
                }
            >
                <Box>{displayValue}</Box>
            </Tooltip>
        </TableCell>
    );
};

const MatchupMatrix = ({ batting_team, bowling_team, matchups }) => {
    const batters = Object.keys(matchups);
    const bowlers = Array.from(
        new Set(
            batters.flatMap(batter => 
                Object.keys(matchups[batter] || {})
            )
        )
    );

    return (
        <Card sx={{ p: 2, mb: 3 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, gap: 1 }}>
                <Typography variant="h6">
                    {decodeURIComponent(batting_team)} vs {decodeURIComponent(bowling_team)} Matchups
                </Typography>
                <Tooltip title="Runs-Wickets (Balls) @ Strike Rate | Hover for more stats">
                    <InfoIcon size={16} />
                </Tooltip>
            </Box>
            <TableContainer>
                <Table size="small">
                    <TableHead>
                        <TableRow>
                            <TableCell 
                                sx={{ 
                                    fontWeight: 'bold',
                                    whiteSpace: 'nowrap',
                                    position: 'sticky',
                                    left: 0,
                                    backgroundColor: 'background.paper',
                                    zIndex: 1
                                }}
                            >
                                Batter
                            </TableCell>
                            {bowlers.map(bowler => (
                                <TableCell 
                                    key={bowler} 
                                    align="center"
                                    sx={{ 
                                        fontWeight: 'bold',
                                        whiteSpace: 'nowrap',
                                        minWidth: '120px'
                                    }}
                                >
                                    {bowler}
                                </TableCell>
                            ))}
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {batters.map(batter => (
                            <TableRow key={batter}>
                                <TableCell 
                                    component="th" 
                                    scope="row"
                                    sx={{ 
                                        fontWeight: 'bold',
                                        whiteSpace: 'nowrap',
                                        position: 'sticky',
                                        left: 0,
                                        backgroundColor: 'background.paper',
                                        zIndex: 1
                                    }}
                                >
                                    {batter}
                                </TableCell>
                                {bowlers.map(bowler => (
                                    <MetricCell 
                                        key={`${batter}-${bowler}`}
                                        data={matchups[batter]?.[bowler]}
                                    />
                                ))}
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
        </Card>
    );
};

const Matchups = ({ team1, team2, startDate, endDate, team1_players, team2_players }) => {
    const [matchupData, setMatchupData] = React.useState(null);
    const [loading, setLoading] = React.useState(false);
    const [error, setError] = React.useState(null);

    const [venueFantasyStats, setVenueFantasyStats] = React.useState({ team1_players: [], team2_players: [] });
    const [venuePlayerHistory, setVenuePlayerHistory] = React.useState({ players: [] });
    const [fantasyTabValue, setFantasyTabValue] = React.useState(0);

    React.useEffect(() => {
        const fetchMatchups = async () => {
            // In the fetchMatchups function in Matchups.jsx
            // In the fetchMatchups function in Matchups.jsx
        try {
            setLoading(true);
            setError(null);

            // Build URL parameters properly
            const params = new URLSearchParams();
            params.append('start_date', startDate);
            params.append('end_date', endDate);
            
            // Add custom team players if provided
            if (team1_players && team1_players.length > 0) {
                team1_players.forEach(player => {
                    params.append('team1_players', player);
                });
            }
            
            if (team2_players && team2_players.length > 0) {
                team2_players.forEach(player => {
                    params.append('team2_players', player);
                });
            }
            
            // Get the matchups data
            const matchupsResponse = await axios.get(
                `http://localhost:8000/teams/${encodeURIComponent(team1)}/${encodeURIComponent(team2)}/matchups?${params.toString()}`
            );
            
            setMatchupData(matchupsResponse.data);
            
            try {
                // Use different fantasy endpoints based on whether we're using custom teams
                if (team1_players && team1_players.length > 0 && team2_players && team2_players.length > 0) {
                    // For custom teams, use the custom-matchups endpoint
                    // Add all players to the params for the fantasy stats
                    const fantasyParams = new URLSearchParams(params);
                    
                    // Add all players to the 'players' parameter
                    [...team1_players, ...team2_players].forEach(player => {
                        fantasyParams.append('players', player);
                    });
                    
                    const fantasyResponse = await axios.get(
                        `http://localhost:8000/custom-matchups/fantasy_stats?${fantasyParams.toString()}`
                    );
                    
                    setVenueFantasyStats(fantasyResponse.data);
                    
                    // Combine players from both teams for player history
                    setVenuePlayerHistory({
                        players: [
                            ...(fantasyResponse.data.team1_players || []), 
                            ...(fantasyResponse.data.team2_players || [])
                        ]
                    });
                } else {
                    // For regular teams, use the team-based endpoints
                    const [fantasyResponse, playerHistoryResponse] = await Promise.all([
                        axios.get(
                            `http://localhost:8000/teams/${encodeURIComponent(team1)}/${encodeURIComponent(team2)}/fantasy_stats?start_date=${startDate}&end_date=${endDate}`
                        ),
                        axios.get(
                            `http://localhost:8000/players/fantasy_history?team1=${encodeURIComponent(team1)}&team2=${encodeURIComponent(team2)}&${params.toString()}`
                        )
                    ]);
                    
                    setVenueFantasyStats(fantasyResponse.data);
                    setVenuePlayerHistory(playerHistoryResponse.data);
                }
            } catch (fantasyError) {
                console.log('Fantasy stats not available:', fantasyError);
                setVenueFantasyStats({ team1_players: [], team2_players: [] });
                setVenuePlayerHistory({ players: [] });
            }
        } catch (error) {
            console.error('Error fetching matchups:', error);
            setError(error.response?.data?.detail || 'Error fetching matchups');
        } finally {
            setLoading(false);
        };
    }

        fetchMatchups();
    }, [team1, team2, startDate, endDate, team1_players, team2_players]);

    if (loading) return <CircularProgress />;
    if (error) return <Alert severity="error">{error}</Alert>;
    if (!matchupData) return null;
    
    // In Matchups.jsx, update the hasMatchups check
    console.log("matchupData:", matchupData);

    if (!matchupData) {
    console.log("No matchupData returned from API");
    return <Alert severity="info">No matchup data available.</Alert>;
    }

    // Check if matchupData has the expected structure
    if (!matchupData.team1 || !matchupData.team2) {
    console.log("matchupData missing team structure:", matchupData);
    return <Alert severity="warning">Unexpected matchup data format.</Alert>;
    }

    // Check if there's any actual matchup data
    const hasMatchups = (
    matchupData.team1.batting_matchups && 
    Object.keys(matchupData.team1.batting_matchups).length > 0 ||
    matchupData.team2.batting_matchups && 
    Object.keys(matchupData.team2.batting_matchups).length > 0
    );

    console.log("hasMatchups check result:", hasMatchups);

    if (!hasMatchups) {
    return (
        <Alert severity="info" sx={{ mt: 3 }}>
        No matchup data found between these players in the selected time period.
        </Alert>
    );
    }

    return (
        <Box sx={{ mt: 3 }}>
            <MatchupMatrix 
                batting_team={matchupData.team1.name}
                bowling_team={matchupData.team2.name}
                matchups={matchupData.team1.batting_matchups}
            />
            <MatchupMatrix 
                batting_team={matchupData.team2.name}
                bowling_team={matchupData.team1.name}
                matchups={matchupData.team2.batting_matchups}
            />
            
            {/* New Fantasy Points Section */}
            <Card sx={{ p: 2, mt: 3 }}>
                <Box sx={{ mb: 2 }}>
                    <Typography variant="h6" gutterBottom>
                        Fantasy Points Analysis
                    </Typography>
                    
                    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
                        <Tabs 
                            value={fantasyTabValue} 
                            onChange={(e, newValue) => setFantasyTabValue(newValue)}
                        >
                            <Tab label="Team Comparison" />
                        </Tabs>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                        {fantasyTabValue === 0 && (
                            <>
                                <Grid container spacing={2}>
                                    <Grid item xs={12} md={6}>
                                        <FantasyPointsTable 
                                            players={venueFantasyStats?.team1_players || []} 
                                            title={`${matchupData.team1.name} Fantasy Points`} 
                                        />
                                    </Grid>
                                    <Grid item xs={12} md={6}>
                                        <FantasyPointsTable 
                                            players={venueFantasyStats?.team2_players || []} 
                                            title={`${matchupData.team2.name} Fantasy Points`} 
                                        />
                                    </Grid>
                                </Grid>         
                                <Grid container spacing={2} sx={{ mt: 2 }}>
                                    <Grid item xs={12} md={6}>
                                        <FantasyPointsBarChart 
                                            players={venueFantasyStats?.team1_players || []} 
                                            title={`${matchupData.team1.name} Fantasy Points Breakdown`} 
                                        />
                                    </Grid>
                                    <Grid item xs={12} md={6}>
                                        <FantasyPointsBarChart 
                                            players={venueFantasyStats?.team2_players || []} 
                                            title={`${matchupData.team2.name} Fantasy Points Breakdown`} 
                                        />
                                    </Grid>
                                </Grid> 
                            </>
                        )}
                    </Box>
                </Box>
            </Card>
        </Box>
    );
};

export default Matchups;