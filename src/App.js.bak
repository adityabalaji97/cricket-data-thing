import React, { useState, useEffect } from 'react';
import { 
  Container, 
  TextField, 
  Box, 
  Autocomplete, 
  CircularProgress, 
  Alert,
  Typography,
  Button,
  Tabs,
  Tab
} from '@mui/material';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import VenueNotes from './components/VenueNotes';
import MatchHistory from './components/MatchHistory';
import Matchups from './components/Matchups';
import MatchupsTab from './components/MatchupsTab';
import CompetitionFilter from './components/CompetitionFilter';
import PlayerProfile from './components/PlayerProfile';
import axios from 'axios';

const DEFAULT_START_DATE = "2024-01-01";
const TODAY = new Date().toISOString().split('T')[0];

const App = () => {
  const [venues, setVenues] = useState([]);
  const [teams, setTeams] = useState([]);
  const [selectedVenue, setSelectedVenue] = useState("All Venues");
  const [selectedTeam1, setSelectedTeam1] = useState(null);
  const [selectedTeam2, setSelectedTeam2] = useState(null);
  const [startDate, setStartDate] = useState(DEFAULT_START_DATE);
  const [endDate, setEndDate] = useState(TODAY);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [matchHistory, setMatchHistory] = useState(null);
  const [venueStats, setVenueStats] = useState(null);
  const [showVisualizations, setShowVisualizations] = useState(false);
  const [competitions, setCompetitions] = useState({
    leagues: [],
    international: false,
    topTeams: 10
  });
  const [statsData, setStatsData] = useState(null);
  const [currentTab, setCurrentTab] = useState(0);

  const [venueFantasyStats, setVenueFantasyStats] = useState({ team1_players: [], team2_players: [] });
  const [venuePlayerHistory, setVenuePlayerHistory] = useState({ players: [] });

  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        setLoading(true);
        setError(null);
        const [venuesResponse, teamsResponse] = await Promise.all([
          axios.get('http://localhost:8000/venues/'),
          axios.get('http://localhost:8000/teams/')
        ]);
        
        if (Array.isArray(venuesResponse.data)) {
          const venuesList = ["All Venues", ...venuesResponse.data.filter(v => v).sort()];
          setVenues(venuesList);
        }
        
        if (Array.isArray(teamsResponse.data)) {
          setTeams(teamsResponse.data.sort((a, b) => a.full_name.localeCompare(b.full_name)));
        }
      } catch (error) {
        console.error('Error fetching initial data:', error);
        setError('Failed to load initial data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchInitialData();
  }, []);

  const handleDateChange = (value, isStartDate) => {
    const newDate = value;
    if (isStartDate) {
      if (newDate > endDate) {
        setError("Start date cannot be after end date");
        return;
      }
      setStartDate(newDate);
    } else {
      if (newDate < startDate) {
        setError("End date cannot be before start date");
        return;
      }
      if (newDate > TODAY) {
        setError("End date cannot be in the future");
        return;
      }
      setEndDate(newDate);
    }
    setError(null);
    setShowVisualizations(false);
  };

  useEffect(() => {
    const fetchMatchHistory = async () => {
      if (!showVisualizations) {
        return;
      }
    
      try {
        setLoading(true);
        setError(null);
    
        const params = new URLSearchParams();
        params.append('start_date', startDate);
        params.append('end_date', endDate);
        
        if (competitions.leagues?.length > 0) {
          competitions.leagues.forEach(league => {
            params.append('leagues', league);
          });
        }
        
        params.append('include_international', competitions.international);
        if (competitions.international && competitions.topTeams) {
          params.append('top_teams', competitions.topTeams);
        }
    
        try {
          // Use allSettled to avoid failing the entire Promise.all if one request fails
          const [venueResponseResult, statsResponseResult] = await Promise.allSettled([
            axios.get(`http://localhost:8000/venue_notes/${encodeURIComponent(selectedVenue)}?${params.toString()}`),
            axios.get(`http://localhost:8000/venues/${encodeURIComponent(selectedVenue)}/stats?${params.toString()}`)
          ]);
      
          // Handle results individually
          if (venueResponseResult.status === 'fulfilled') {
            setVenueStats(venueResponseResult.value.data);
          } else {
            console.error('Error fetching venue notes:', venueResponseResult.reason);
            // Set default venue stats if request failed
            setVenueStats({
              venue: selectedVenue,
              total_matches: 0,
              batting_first_wins: 0,
              batting_second_wins: 0,
              highest_total: 0,
              lowest_total: 0,
              average_first_innings: 0,
              average_second_innings: 0,
              highest_total_chased: 0,
              lowest_total_defended: 0,
              average_winning_score: 0,
              average_chasing_score: 0,
              phase_wise_stats: {
                batting_first_wins: {},
                chasing_wins: {}
              }
            });
          }
          
          if (statsResponseResult.status === 'fulfilled') {
            setStatsData(statsResponseResult.value.data);
          } else {
            console.error('Error fetching stats data:', statsResponseResult.reason);
            // Set default stats data if request failed
            setStatsData({
              batting_leaders: [],
              bowling_leaders: [],
              batting_scatter: []
            });
          }
        } catch (error) {
          console.error('Error in main API calls:', error);
          setError('Failed to load venue data. Please try again.');
        }
    
        // Only fetch team-specific data if both teams are selected
        if (selectedTeam1 && selectedTeam2) {
          try {
            const [historyResponseResult, fantasyResponseResult, playerHistoryResponseResult] = await Promise.allSettled([
              axios.get(
                `http://localhost:8000/venues/${encodeURIComponent(selectedVenue)}/teams/${encodeURIComponent(selectedTeam1.full_name)}/${encodeURIComponent(selectedTeam2.full_name)}/history?${params.toString()}`
              ),
              axios.get(
                `http://localhost:8000/venues/${encodeURIComponent(selectedVenue)}/teams/${encodeURIComponent(selectedTeam1.full_name)}/${encodeURIComponent(selectedTeam2.full_name)}/fantasy_stats?${params.toString()}`
              ),
              axios.get(
                `http://localhost:8000/venues/${encodeURIComponent(selectedVenue)}/players/fantasy_history?team1=${encodeURIComponent(selectedTeam1.full_name)}&team2=${encodeURIComponent(selectedTeam2.full_name)}&${params.toString()}`
              )
            ]);
            
            // Handle team-specific results individually
            if (historyResponseResult.status === 'fulfilled') {
              setMatchHistory(historyResponseResult.value.data);
            } else {
              console.error('Error fetching match history:', historyResponseResult.reason);
              setMatchHistory({
                venue_results: [],
                team1_results: [],
                team2_results: [],
                h2h_stats: {
                  team1_wins: 0,
                  team2_wins: 0,
                  draws: 0,
                  recent_matches: []
                }
              });
            }
            
            if (fantasyResponseResult.status === 'fulfilled') {
              setVenueFantasyStats(fantasyResponseResult.value.data);
            } else {
              console.error('Error fetching fantasy stats:', fantasyResponseResult.reason);
              setVenueFantasyStats({ team1_players: [], team2_players: [] });
            }
            
            if (playerHistoryResponseResult.status === 'fulfilled') {
              setVenuePlayerHistory(playerHistoryResponseResult.value.data);
            } else {
              console.error('Error fetching player history:', playerHistoryResponseResult.reason);
              setVenuePlayerHistory({ players: [] });
            }
          } catch (error) {
            console.error('Error in team-specific API calls:', error);
            setError('Failed to load team data. Please try again.');
            setMatchHistory(null);
            setVenueFantasyStats({ team1_players: [], team2_players: [] });
            setVenuePlayerHistory({ players: [] });
          }
        } else {
          // Reset team-specific state if teams not selected
          setMatchHistory(null);
          setVenueFantasyStats({ team1_players: [], team2_players: [] });
          setVenuePlayerHistory({ players: [] });
        }
    
      } catch (error) {
        console.error('Global error fetching data:', error);
        setError(error.response?.data?.detail || 'Failed to load data. Please check the console for details.');
      } finally {
        setLoading(false);
      }
    };

    fetchMatchHistory();
  }, [selectedVenue, selectedTeam1, selectedTeam2, startDate, endDate, showVisualizations, competitions]);

  const handleFilterChange = (filters) => {
    setCompetitions(filters);
    if (showVisualizations) {
      setShowVisualizations(false);
      setTimeout(() => setShowVisualizations(true), 0);
    }
  };

  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
  };

  return (
    <Router>
      <Container maxWidth="xl">
        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
          <Tabs value={currentTab} onChange={handleTabChange}>
            <Tab label="Venue Analysis" component={Link} to="/" />
            <Tab label="Player Profile" component={Link} to="/player" />
            <Tab label="Matchups" component={Link} to="/matchups" />
          </Tabs>
        </Box>

        <Routes>
          <Route path="/player" element={<PlayerProfile />} />
          <Route path="/matchups" element={<MatchupsTab />} />
          <Route path="/" element={
            <Box sx={{ my: 3 }}>
              {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {error}
                </Alert>
              )}
              
              <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
                <Autocomplete
                  value={selectedVenue}
                  onChange={(event, newValue) => {
                    setSelectedVenue(newValue || "All Venues");
                    setShowVisualizations(false);
                  }}
                  options={venues}
                  sx={{ width: 300 }}
                  loading={loading}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Select Venue"
                      required
                      InputProps={{
                        ...params.InputProps,
                        endAdornment: (
                          <>
                            {loading ? <CircularProgress color="inherit" size={20} /> : null}
                            {params.InputProps.endAdornment}
                          </>
                        ),
                      }}
                    />
                  )}
                />
                
                <TextField
                  label="Start Date"
                  type="date"
                  value={startDate}
                  onChange={(e) => handleDateChange(e.target.value, true)}
                  InputLabelProps={{ shrink: true }}
                  inputProps={{ max: endDate }}
                  required
                />
                
                <TextField
                  label="End Date"
                  type="date"
                  value={endDate}
                  onChange={(e) => handleDateChange(e.target.value, false)}
                  InputLabelProps={{ shrink: true }}
                  inputProps={{ max: TODAY }}
                  required
                />
              </Box>

              <CompetitionFilter onFilterChange={handleFilterChange} />

              {startDate && endDate && !error && (
                <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
                  <Autocomplete
                    value={selectedTeam1}
                    onChange={(event, newValue) => {
                      setSelectedTeam1(newValue);
                      setShowVisualizations(false);
                    }}
                    options={teams}
                    sx={{ width: 200 }}
                    getOptionLabel={(option) => option?.abbreviated_name || ''}
                    renderOption={(props, option) => (
                      <li {...props}>
                        <Typography>
                          {option.abbreviated_name} - {option.full_name}
                        </Typography>
                      </li>
                    )}
                    renderInput={(params) => (
                      <TextField {...params} label="Team 1" />
                    )}
                    isOptionEqualToValue={(option, value) => 
                      option?.full_name === value?.full_name
                    }
                  />
                  
                  <Autocomplete
                    value={selectedTeam2}
                    onChange={(event, newValue) => {
                      setSelectedTeam2(newValue);
                      setShowVisualizations(false);
                    }}
                    options={teams.filter(team => team?.full_name !== selectedTeam1?.full_name)}
                    sx={{ width: 200 }}
                    getOptionLabel={(option) => option?.abbreviated_name || ''}
                    renderOption={(props, option) => (
                      <li {...props}>
                        <Typography>
                          {option.abbreviated_name} - {option.full_name}
                        </Typography>
                      </li>
                    )}
                    renderInput={(params) => (
                      <TextField {...params} label="Team 2" />
                    )}
                    isOptionEqualToValue={(option, value) => 
                      option?.full_name === value?.full_name
                    }
                  />

                  <Button 
                    variant="contained"
                    onClick={() => setShowVisualizations(true)}
                    disabled={loading || error}
                  >
                    Go
                  </Button>
                </Box>
              )}

              {showVisualizations && !loading && !error && (
                <>
                  <VenueNotes 
                    venue={selectedVenue}
                    startDate={startDate} 
                    endDate={endDate}
                    venueStats={venueStats}
                    statsData={statsData}
                    selectedTeam1={selectedTeam1} 
                    selectedTeam2={selectedTeam2} 
                    venueFantasyStats={venueFantasyStats}
                    venuePlayerHistory={venuePlayerHistory}
                  />
                  {matchHistory && selectedTeam1 && selectedTeam2 && (
                    <>
                      <MatchHistory 
                        venue={selectedVenue}
                        team1={selectedTeam1.abbreviated_name}
                        team2={selectedTeam2.abbreviated_name}
                        venueResults={matchHistory.venue_results}
                        team1Results={matchHistory.team1_results}
                        team2Results={matchHistory.team2_results}
                        h2hStats={matchHistory.h2h_stats}
                      />
                      <Matchups
                        team1={selectedTeam1.full_name}
                        team2={selectedTeam2.full_name}
                        startDate={startDate}
                        endDate={endDate}
                      />
                    </>
                  )}
                </>
              )}
            </Box>
          } />
        </Routes>
      </Container>
    </Router>
  );
};

export default App;