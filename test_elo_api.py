#!/usr/bin/env python3\n\"\"\"\nTest script for ELO API endpoints\n\"\"\"\n\nimport requests\nimport json\nfrom datetime import datetime, date\n\nAPI_BASE = \"http://localhost:8000\"  # Adjust if your API runs on a different port\n\ndef test_elo_endpoints():\n    \"\"\"Test the new ELO endpoints\"\"\"\n    \n    # Test teams to check\n    test_teams = ['India', 'Australia', 'Mumbai Indians', 'Chennai Super Kings']\n    \n    for team in test_teams:\n        print(f\"\\n=== Testing ELO endpoints for {team} ===\")\n        \n        try:\n            # Test ELO stats endpoint\n            print(f\"\\n1. Testing ELO stats for {team}...\")\n            elo_response = requests.get(\n                f\"{API_BASE}/teams/{team}/elo-stats\",\n                params={\n                    'start_date': '2024-01-01',\n                    'end_date': '2024-12-31'\n                }\n            )\n            \n            if elo_response.status_code == 200:\n                elo_data = elo_response.json()\n                print(f\"   ✓ ELO Stats Retrieved Successfully\")\n                print(f\"   Starting ELO: {elo_data.get('starting_elo')}\")\n                print(f\"   Ending ELO: {elo_data.get('ending_elo')}\")\n                print(f\"   Peak ELO: {elo_data.get('peak_elo')}\")\n                print(f\"   Lowest ELO: {elo_data.get('lowest_elo')}\")\n                print(f\"   Total Matches: {elo_data.get('total_matches')}\")\n                print(f\"   ELO Change: {elo_data.get('elo_change')}\")\n            else:\n                print(f\"   ✗ ELO Stats Failed: {elo_response.status_code}\")\n                print(f\"   Error: {elo_response.text}\")\n            \n            # Test matches with ELO endpoint\n            print(f\"\\n2. Testing matches with ELO for {team}...\")\n            matches_response = requests.get(\n                f\"{API_BASE}/teams/{team}/matches\",\n                params={\n                    'start_date': '2024-01-01',\n                    'end_date': '2024-12-31',\n                    'include_elo': True\n                }\n            )\n            \n            if matches_response.status_code == 200:\n                matches_data = matches_response.json()\n                print(f\"   ✓ Matches with ELO Retrieved Successfully\")\n                print(f\"   Total Matches: {matches_data.get('total_matches')}\")\n                print(f\"   Includes ELO: {matches_data.get('includes_elo')}\")\n                \n                # Show sample match with ELO\n                if matches_data.get('matches'):\n                    sample_match = matches_data['matches'][0]\n                    print(f\"   Sample Match ELO:\")\n                    if sample_match.get('elo'):\n                        elo_info = sample_match['elo']\n                        print(f\"     Team ELO: {elo_info.get('team_elo')}\")\n                        print(f\"     Opponent ELO: {elo_info.get('opponent_elo')}\")\n                        print(f\"     ELO Difference: {elo_info.get('elo_difference')}\")\n                    else:\n                        print(f\"     No ELO data in match\")\n            else:\n                print(f\"   ✗ Matches with ELO Failed: {matches_response.status_code}\")\n                print(f\"   Error: {matches_response.text}\")\n                \n        except requests.exceptions.ConnectionError:\n            print(f\"   ✗ Connection Error - Is the API server running on {API_BASE}?\")\n        except Exception as e:\n            print(f\"   ✗ Error testing {team}: {e}\")\n\ndef test_specific_team(team_name):\n    \"\"\"Test a specific team in detail\"\"\"\n    print(f\"\\n=== DETAILED ELO TEST FOR {team_name} ===\")\n    \n    try:\n        # Get ELO stats\n        elo_response = requests.get(\n            f\"{API_BASE}/teams/{team_name}/elo-stats\",\n            params={'start_date': '2023-01-01', 'end_date': '2024-12-31'}\n        )\n        \n        if elo_response.status_code == 200:\n            elo_data = elo_response.json()\n            \n            print(f\"\\nELO Statistics:\")\n            print(f\"Starting ELO: {elo_data.get('starting_elo')}\")\n            print(f\"Ending ELO: {elo_data.get('ending_elo')}\")\n            print(f\"Peak ELO: {elo_data.get('peak_elo')}\")\n            print(f\"Lowest ELO: {elo_data.get('lowest_elo')}\")\n            print(f\"ELO Change: {elo_data.get('elo_change')}\")\n            print(f\"Total Matches: {elo_data.get('total_matches')}\")\n            \n            # Show first few ELO history entries\n            if elo_data.get('elo_history'):\n                print(f\"\\nFirst 5 ELO History Entries:\")\n                for entry in elo_data['elo_history'][:5]:\n                    print(f\"  {entry['date']}: ELO {entry['elo']} vs {entry['opponent']} (ELO {entry['opponent_elo']}) - {entry['result']}\")\n        else:\n            print(f\"Error getting ELO stats: {elo_response.status_code}\")\n            print(elo_response.text)\n            \n    except Exception as e:\n        print(f\"Error in detailed test: {e}\")\n\nif __name__ == \"__main__\":\n    print(\"=== ELO API ENDPOINTS TEST ===\")\n    print(f\"Testing API at: {API_BASE}\")\n    print(f\"Current time: {datetime.now()}\")\n    \n    # Basic tests\n    test_elo_endpoints()\n    \n    # Detailed test for one team\n    test_specific_team('India')\n    \n    print(\"\\n=== TEST COMPLETE ===\")\n    print(\"\\nIf all tests passed, the ELO endpoints are working correctly!\")\n    print(\"You can now use the updated TeamProfile component with ELO data.\")\n